---
import { getCollection } from "astro:content";
import { SITE_DESCRIPTION, SITE_IMG, SITE_TITLE } from "../../consts/consts";
import Layout from "../../layouts/Layout.astro";
import { formatDate } from "../../functions/date";

const posts = (await getCollection("blog")).toSorted(
  (a, b) => b.data.publishedDate.valueOf() - a.data.publishedDate.valueOf()
);

const internalPosts = posts.map((post) => ({
  title: post.data.title,
  description: post.data.description,
  publishedDate: post.data.publishedDate,
  url: `/blog/${post.id}/`,
}));
---

<Layout
  title={`Blog - ${SITE_TITLE}`}
  description={SITE_DESCRIPTION}
  image={SITE_IMG}
>
  <div class="blog-header">
    <h1>Blog</h1>
  </div>

  <ul class="posts-list">
    {
      internalPosts.map((post) => (
        <li class="post-item">
          <a href={post.url} class="post-link">
            <div class="post-content">
              <p class="post-title">{post.title}</p>
              {post.description && (
                <p class="post-description">{post.description}</p>
              )}
            </div>
            <div class="post-meta">
              <time
                class="post-date"
                datetime={post.publishedDate.toISOString()}
              >
                {formatDate(post.publishedDate)}
              </time>
            </div>
          </a>
        </li>
      ))
    }
  </ul>
</Layout>

<style>
  .blog-header {
    text-align: center;
    margin-bottom: 3rem;
  }

  .blog-header h1 {
    font-size: var(--text-4xl);
    color: var(--color-accent);
  }

  .posts-list {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
    gap: 2rem;
    list-style: none;
  }

  .post-item {
    position: relative;
    transition: var(--transition-fast);
    border-radius: var(--radius-md);
    background: var(--color-surface);
    border: 1px solid var(--color-border);
  }

  .post-item:hover,
  .post-item:focus-within {
    transform: translateY(-2px);
  }

  .post-link {
    display: flex;
    flex-direction: column;
    padding: 0.75rem 1rem;
    text-decoration: none;
    height: 100%;
    transition: var(--transition-fast);
    min-height: 140px;
  }

  .post-content {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .post-title {
    color: var(--color-text);
    margin: 0;
    font-size: var(--text-h3);
    font-weight: var(--font-weight-semibold);
    line-height: var(--line-height-tight);
    transition: var(--transition-fast);
  }

  .post-link:hover .post-title,
  .post-link:focus .post-title {
    color: var(--color-accent);
  }

  .post-description {
    color: var(--color-muted);
    margin: 0;
    line-height: var(--line-height-loose);
  }

  .post-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 1rem;
    margin-top: 1rem;
    flex-shrink: 0;
  }

  .post-date {
    color: var(--color-muted);
    font-family: var(--font-code);
    font-size: var(--text-sm);
  }

  .post-site {
    color: var(--color-accent);
    font-family: var(--font-code);
    font-size: var(--text-xs);
    padding: 0.25rem 0.5rem;
    border-radius: var(--radius-sm);
    border: 1px solid var(--color-border);
  }

  @container (width < 600px) {
    .blog-header {
      margin-bottom: 2rem;
    }

    .blog-header h1 {
      font-size: var(--text-h1);
    }

    .posts-list {
      gap: 1.5rem;
    }

    .post-link {
      padding: 1rem;
      min-height: 120px;
    }

    .post-title {
      font-size: var(--text-base);
    }
  }
</style>
